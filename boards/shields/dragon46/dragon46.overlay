/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,kscan = &kscan1;
        zmk,matrix-transform = &default_transform;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <14>;
        rows = <5>;
        map = <
                                        /*RC(8,0)*/                   RC(7,4) RC(7,5) 
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                   RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)                   RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(6,4)   RC(6,5) RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5)
                        RC(6,0) RC(6,1) RC(6,2) RC(6,3)   RC(7,0) RC(7,1) RC(7,2) RC(7,3)
        >;
    };

/*
    kscan0: kscan_composite {
        compatible = "zmk,kscan-composite";
        rows = <9>;
        columns = <6>;

        // Include the matrix driver
        matrix {
            kscan = <&kscan1>;
        };

        // Include the direct GPIO driver...
        direct {
            kscan = <&kscan2>;
            row-offset = <8>; // ...and shift it to not overlap
        };
    };
*/

    kscan1: kscan_matrix {
        compatible = "zmk,kscan-gpio-matrix";
        /* wakeup-source; */
        diode-direction = "col2row";

        row-gpios
            = <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  /* ROW0 */
            , <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  /* ROW1 */
            , <&gpio0 29  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> /* ROW2 */
            , <&gpio0 24 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  /* ROW3 */
            , <&gpio0 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   /* ROW4 */
            , <&gpio1 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   /* ROW5 */
            , <&gpio1 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  /* ROW6 */
            , <&gpio0 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  /* ROW7 */
            ;

        col-gpios
            = <&gpio1 13 GPIO_ACTIVE_HIGH>   /* COL0 */
            , <&gpio1 11 GPIO_ACTIVE_HIGH>   /* COL1 */
            , <&gpio0 10 GPIO_ACTIVE_HIGH>   /* COL2 */
            , <&gpio0  9 GPIO_ACTIVE_HIGH>   /* COL3 */
            , <&gpio1  6 GPIO_ACTIVE_HIGH>   /* COL4 */
            , <&gpio1  4 GPIO_ACTIVE_HIGH>   /* COL5 */
            ;
    };

/*
    kscan2: kscan {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        input-gpios
            = <&gpio1 7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            ;
    };
*/

    keys {
        compatible = "gpio-keys";
        on_off_key: soft_off_key {
            gpios = <&gpio1 7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        };
    };

behaviors {
        hw_soft_off: hw_soft_off {
            compatible = "zmk,behavior-soft-off";
            #binding-cells = <0>;
        };
    };

    soft_off_direct_kscan: soft_off_direct_kscan {
        compatible = "zmk,kscan-gpio-direct";
        input-keys = <&on_off_key>;
        wakeup-source;
    };

    soft_off_sideband_behaviors {
        compatible = "zmk,kscan-sideband-behaviors";
        kscan = <&soft_off_direct_kscan>;
        soft_off {
            row = <0>;
            column = <0>;
            bindings = <&hw_soft_off>;
        };
    };

    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        status = "okay";
        wakeup-sources = <&soft_off_direct_kscan>;
    };

    /*

    wakeup_source: wakeup_source {
        compatible = "zmk,gpio-key-wakeup-trigger";
        trigger = <&on_off_key>;
        wakeup-source;
    };

    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&wakeup_source> ;
    };

    behaviors {
        hw_soft_off: hw_soft_off {
            compatible = "zmk,behavior-soft-off";
            #binding-cells = <0>;
            hold-time-ms = <200>;
        };
    };

    soft_off_direct_scan: soft_off_direct_scan {
        compatible = "zmk,kscan-gpio-direct";
        input-keys = <&on_off_key>;
        wakeup-source;
    };

    side_band_behavior_triggers: side_band_behavior_triggers {
        compatible = "zmk,kscan-sideband-behaviors";
        kscan = <&soft_off_direct_scan>;
        auto-enable;
        wakeup-source;

        soft_off {
            column = <0>;
            row = <0>;
            bindings = <&hw_soft_off>;
        };
    };
    */
    
/*
keys {
    compatible = "gpio-keys";
    wakeup_key: wakeup_key {
      gpios = <&gpio1 7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    };
  };

  behaviors {
    hw_soft_off: behavior_hw_soft_off {
      compatible = "zmk,behavior-soft-off";
      #binding-cells = <0>;
      label = "HW_SOFT_OFF";
      hold-time-ms = <1000>;
    };
  };

  soft_off_behavior_key {
    compatible = "zmk,behavior-key";
    bindings = <&hw_soft_off>;
    key = <&wakeup_key>;
    status = "okay";
  };

  wakeup_source: wakeup_source {
    compatible = "zmk,wakeup-trigger-key";
    trigger = <&wakeup_key>;
    wakeup-source;
  };

  soft_off_wakers {
    compatible = "zmk,soft-off-wakup-sources";
    wakeup-sources = <&wakeup_source>;
  };
  */
/* ---------- */

    right_encoder: right_encoder {
        compatible = "alps,ec11";
        steps = <60>;
        a-gpios = <&gpio1 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        b-gpios = <&gpio1 1 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    };

    

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&right_encoder>;
        triggers-per-rotation = <15>;
    };
};

